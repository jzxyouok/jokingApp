package com.example.jokingApp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.jokingApp.db.JokeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOKE_ENTITY".
*/
public class JokeEntityDao extends AbstractDao<JokeEntity, Void> {

    public static final String TABLENAME = "JOKE_ENTITY";

    /**
     * Properties of entity JokeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Des = new Property(0, String.class, "des", false, "DES");
        public final static Property Imageurl = new Property(1, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
    };


    public JokeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public JokeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOKE_ENTITY\" (" + //
                "\"DES\" TEXT," + // 0: des
                "\"IMAGEURL\" TEXT," + // 1: imageurl
                "\"NAME\" TEXT," + // 2: name
                "\"URL\" TEXT," + // 3: url
                "\"ID\" TEXT);"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOKE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JokeEntity entity) {
        stmt.clearBindings();
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(1, des);
        }
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(2, imageurl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public JokeEntity readEntity(Cursor cursor, int offset) {
        JokeEntity entity = new JokeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // des
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageurl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JokeEntity entity, int offset) {
        entity.setDes(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImageurl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(JokeEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(JokeEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
